{"version":3,"file":"azure-msal-angular.js","sources":["ng://@azure/msal-angular/src/broadcast.service.ts","ng://@azure/msal-angular/src/MSALError.ts","ng://@azure/msal-angular/src/constants.ts","ng://@azure/msal-angular/src/msal.service.ts","ng://@azure/msal-angular/src/msal-guard.service.ts","ng://@azure/msal-angular/src/msal.interceptor.ts","ng://@azure/msal-angular/src/msal-angular.configuration.ts","ng://@azure/msal-angular/src/msal.module.ts","ng://@azure/msal-angular/azure-msal-angular.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable, Subscription } from \"rxjs\";\r\nimport { filter, map } from \"rxjs/operators\";\r\n\r\nexport type MessageCallback = (payload: any) => void;\r\n\r\n@Injectable()\r\nexport class BroadcastService {\r\n    private _msalSubject : BehaviorSubject<any> ;\r\n    private msalItem$:  Observable<any>;\r\n\r\n    constructor() {\r\n     this._msalSubject = new BehaviorSubject<any>(1);\r\n     this.msalItem$  = this._msalSubject.asObservable();\r\n    }\r\n\r\n    broadcast(type: string, payload: any) {\r\n        this._msalSubject.next({type , payload});\r\n    }\r\n\r\n    getMSALSubject() {\r\n        return this._msalSubject;\r\n    }\r\n\r\n    getMSALItem() {\r\n        return this.msalItem$;\r\n    }\r\n\r\n    subscribe(type: string, callback: MessageCallback): Subscription {\r\n        return this.msalItem$\r\n            .pipe(\r\n                filter(message => message.type === type),\r\n                map(message => message.payload)\r\n            )\r\n            .subscribe(callback);\r\n    }\r\n\r\n}\r\n","export class MSALError {\r\n    private _error: string = \"\";\r\n    private _errorDesc: string = \"\";\r\n    private _scopes: string = \"\";\r\n\r\n\r\n    constructor(error: string , errorDesc?: string, scopes?: string) {\r\n        this._error = error;\r\n        if (errorDesc) {\r\n            this._errorDesc = errorDesc;\r\n        }\r\n        if (scopes) {\r\n            this._scopes = scopes;\r\n        }\r\n    }\r\n\r\n    get error(): string {\r\n        return this._error;\r\n    }\r\n\r\n    set error(value: string) {\r\n        this._error = value;\r\n    }\r\n\r\n    get errorDesc(): string {\r\n        return this._errorDesc;\r\n    }\r\n\r\n    set errorDesc(value: string) {\r\n        this._errorDesc = value;\r\n    }\r\n\r\n    get scopes(): string {\r\n        return this._scopes;\r\n    }\r\n\r\n    set scopes(value: string) {\r\n        this._scopes = value;\r\n    }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_CONFIG = new InjectionToken<string>(\"MSAL_CONFIG\");\r\nexport const MSAL_CONFIG_ANGULAR = new InjectionToken<string>(\"MSAL_CONFIG_ANGULAR\");\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport {\r\n    UserAgentApplication,\r\n    Configuration,\r\n    AuthenticationParameters,\r\n    AuthResponse,\r\n    AuthError,\r\n    authResponseCallback,\r\n    errorReceivedCallback,\r\n    tokenReceivedCallback,\r\n    UrlUtils\r\n} from \"msal\";\r\nimport { Router } from \"@angular/router\";\r\nimport {BroadcastService} from \"./broadcast.service\";\r\nimport { MSALError } from \"./MSALError\";\r\nimport { MsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\nconst buildMsalConfig = (config: Configuration) : Configuration => {\r\n    return {\r\n        ...config,\r\n        framework: {\r\n            ...config.framework,\r\n            isAngular: true\r\n        }\r\n    };\r\n};\r\n\r\n@Injectable()\r\nexport class MsalService extends UserAgentApplication {\r\n\r\n    constructor(\r\n        @Inject(MSAL_CONFIG) private msalConfig: Configuration,\r\n        @Inject(MSAL_CONFIG_ANGULAR) private msalAngularConfig: MsalAngularConfiguration,\r\n        private router: Router,\r\n        private broadcastService: BroadcastService\r\n    ) {\r\n        super(buildMsalConfig(msalConfig));\r\n\r\n        window.addEventListener(\"msal:popUpHashChanged\", (e: CustomEvent) => {\r\n            this.getLogger().verbose(\"popUpHashChanged \");\r\n        });\r\n\r\n        window.addEventListener(\"msal:popUpClosed\", (e: CustomEvent) => {\r\n            var errorParts = e.detail.split(\"|\");\r\n            var msalError = new MSALError(errorParts[0], errorParts[1]);\r\n            if (this.getLoginInProgress()) {\r\n                broadcastService.broadcast(\"msal:loginFailure\", msalError);\r\n                this.setloginInProgress(false);\r\n            }\r\n            else if (this.getAcquireTokenInProgress()) {\r\n                broadcastService.broadcast(\"msal:acquireTokenFailure\", msalError);\r\n                this.setAcquireTokenInProgress(false);\r\n            }\r\n        });\r\n\r\n        this.router.events.subscribe(event => {\r\n            for (var i = 0; i < router.config.length; i++) {\r\n                if (!router.config[i].canActivate) {\r\n                    if (this.msalAngularConfig.unprotectedResources) {\r\n                        if (!this.isEmpty(router.config[i].path) && !this.isUnprotectedResource(router.config[i].path)) {\r\n                            this.msalAngularConfig.unprotectedResources.push(router.config[i].path);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private isUnprotectedResource(url: string): boolean {\r\n        const frameworkUnprotectedResources = this.msalConfig.framework && this.msalConfig.framework.unprotectedResources;\r\n        const configUnprotectedResources = this.msalAngularConfig.unprotectedResources || [];\r\n\r\n        const unprotectedResources = frameworkUnprotectedResources && frameworkUnprotectedResources.length ? frameworkUnprotectedResources : configUnprotectedResources;\r\n\r\n        return unprotectedResources.some(resource => url.indexOf(resource) > -1);\r\n    }\r\n\r\n    private isEmpty(str: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n\r\n    public loginPopup(request?: AuthenticationParameters): Promise<any> {\r\n        return super.loginPopup(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:loginSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:loginFailure\", error);\r\n                this.getLogger().error(\"Error during login:\\n\" + error.errorMessage);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public ssoSilent(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.ssoSilent(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:ssoSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:ssoFailure\", error);\r\n                this.getLogger().error(\"Error during login:\\n\" + error.errorMessage);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    public acquireTokenSilent(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.acquireTokenSilent(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenFailure\", error);\r\n                this.getLogger().error(\"Error when acquiring token for scopes: \" + request.scopes + \" \" + error);\r\n                throw error;\r\n            });\r\n\r\n    }\r\n\r\n    public acquireTokenPopup(request: AuthenticationParameters): Promise<AuthResponse> {\r\n        return super.acquireTokenPopup(request)\r\n            .then((authResponse: AuthResponse) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                return authResponse;\r\n            })\r\n            .catch((error: AuthError) => {\r\n                this.broadcastService.broadcast(\"msal:acquireTokenFailure\", error);\r\n                this.getLogger().error(\"Error when acquiring token for scopes : \" + request.scopes + \" \" +  error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    handleRedirectCallback(tokenReceivedCallback: tokenReceivedCallback, errorReceivedCallback: errorReceivedCallback): void;\r\n    handleRedirectCallback(authCallback: authResponseCallback): void;\r\n    handleRedirectCallback(authOrTokenCallback: authResponseCallback | tokenReceivedCallback, errorReceivedCallback?: errorReceivedCallback): void {\r\n        super.handleRedirectCallback((authError: AuthError, authResponse: AuthResponse) => {\r\n            if (authError) {\r\n                if (!this.getAccount()) {\r\n                    this.broadcastService.broadcast(\"msal:loginFailure\", authError);\r\n\r\n                } else {\r\n                    this.broadcastService.broadcast(\"msal:acquireTokenFailure\", authError);\r\n                }\r\n\r\n                if (errorReceivedCallback) {\r\n                    errorReceivedCallback(authError, authResponse.accountState);\r\n                } else {\r\n                    (authOrTokenCallback as authResponseCallback)(authError, authResponse);\r\n                }\r\n\r\n            } else if (authResponse) {\r\n                if (authResponse.tokenType === \"id_token\") {\r\n                    this.broadcastService.broadcast(\"msal:loginSuccess\", authResponse);\r\n                } else {\r\n                    this.broadcastService.broadcast(\"msal:acquireTokenSuccess\", authResponse);\r\n                }\r\n\r\n                if (errorReceivedCallback) {\r\n                    (authOrTokenCallback as tokenReceivedCallback)(authResponse);\r\n                } else {\r\n                    (authOrTokenCallback as authResponseCallback)(null, authResponse);\r\n                }\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearCacheForScope(accessToken: string) {\r\n        return super.clearCacheForScope(accessToken);\r\n    }\r\n\r\n    public getScopesForEndpoint(endpoint: string) : Array<string> {\r\n        if (this.msalConfig.framework && this.msalConfig.framework.unprotectedResources) {\r\n            this.getLogger().info(\"msalConfig.framework.unprotectedResources is deprecated, use msalAngularConfig.unprotectedResources\");\r\n        }\r\n\r\n        // if user specified list of unprotectedResources, no need to send token to these endpoints, return null.\r\n        const isUnprotected = this.isUnprotectedResource(endpoint);\r\n        if (isUnprotected) {\r\n            return null;\r\n        }\r\n\r\n        const frameworkProtectedResourceMap = this.msalConfig.framework && this.msalConfig.framework.protectedResourceMap;\r\n        if (frameworkProtectedResourceMap) {\r\n            this.getLogger().info(\"msalConfig.framework.protectedResourceMap is deprecated, use msalAngularConfig.protectedResourceMap\");\r\n        }\r\n\r\n        const protectedResourceMap = frameworkProtectedResourceMap && frameworkProtectedResourceMap.size ? frameworkProtectedResourceMap : new Map(this.msalAngularConfig.protectedResourceMap);\r\n\r\n        // process all protected resources and send the matched one\r\n        const keyForEndpoint = Array.from(protectedResourceMap.keys()).find(key => endpoint.indexOf(key) > -1);\r\n        if (keyForEndpoint) {\r\n            return protectedResourceMap.get(keyForEndpoint);\r\n        }\r\n\r\n        /*\r\n         * default resource will be clientid if nothing specified\r\n         * App will use idtoken for calls to itself\r\n         * check if it's staring from http or https, needs to match with app host\r\n         */\r\n        if (endpoint.indexOf(\"http://\") > -1 || endpoint.indexOf(\"https://\") > -1) {\r\n            if (UrlUtils.getHostFromUri(endpoint) === UrlUtils.getHostFromUri(super.getRedirectUri())) {\r\n                return new Array<string>(this.msalConfig.auth.clientId);\r\n            }\r\n        } else {\r\n            /*\r\n             * in angular level, the url for $http interceptor call could be relative url,\r\n             * if it's relative call, we'll treat it as app backend call.\r\n             */\r\n            return new Array<string>(this.msalConfig.auth.clientId);\r\n        }\r\n\r\n        // if not the app's own backend or not a domain listed in the endpoints structure\r\n        return null;\r\n    }\r\n}\r\n\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport {\r\n    ActivatedRoute,\r\n    ActivatedRouteSnapshot, CanActivate, Router,\r\n    RouterStateSnapshot,\r\n} from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Location, PlatformLocation } from \"@angular/common\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { Configuration, AuthError, InteractionRequiredAuthError, UrlUtils, WindowUtils } from \"msal\";\r\nimport { MsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate {\r\n\r\n    constructor(\r\n        @Inject(MSAL_CONFIG) private msalConfig: Configuration,\r\n        @Inject(MSAL_CONFIG_ANGULAR) private msalAngularConfig: MsalAngularConfiguration,\r\n        private authService: MsalService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private location: Location,\r\n        private platformLocation: PlatformLocation,\r\n        private broadcastService: BroadcastService\r\n    ) {}\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        // If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n        // Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    /**\r\n     * Interactively prompt the user to login\r\n     * @param url Path of the requested page\r\n     */\r\n    async loginInteractively(url: string) {\r\n        if (this.msalAngularConfig.popUp) {\r\n            return this.authService.loginPopup({\r\n                scopes: this.msalAngularConfig.consentScopes,\r\n                extraQueryParameters: this.msalAngularConfig.extraQueryParameters\r\n            })\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n\r\n        this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            scopes: this.msalAngularConfig.consentScopes,\r\n            extraQueryParameters: this.msalAngularConfig.extraQueryParameters\r\n        });\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\r\n        this.authService.getLogger().verbose(\"location change event from old url to new url\");\r\n\r\n        // If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n        // short-circuit to prevent redirecting or popups.\r\n        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return false;\r\n        }\r\n\r\n        if (!this.authService.getAccount()) {\r\n            return this.loginInteractively(state.url);\r\n        }\r\n\r\n        return this.authService.acquireTokenSilent({\r\n            scopes: [this.msalConfig.auth.clientId]\r\n        })\r\n            .then(() => true)\r\n            .catch((error: AuthError) => {\r\n                if (InteractionRequiredAuthError.isInteractionRequiredError(error.errorCode)) {\r\n                    this.authService.getLogger().info(`Interaction required error in MSAL Guard, prompting for interaction.`);\r\n                    return this.loginInteractively(state.url);\r\n                }\r\n\r\n                this.authService.getLogger().error(`Non-interaction error in MSAL Guard: ${error.errorMessage}`);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor,\r\n    HttpErrorResponse\r\n} from \"@angular/common/http\";\r\n\r\nimport { Observable, from } from \"rxjs\";\r\nimport { mergeMap, tap } from \"rxjs/operators\";\r\n\r\nimport {MsalService} from \"./msal.service\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { AuthResponse, ServerHashParamKeys } from \"msal\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(private auth: MsalService ,  private broadcastService: BroadcastService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const scopes = this.auth.getScopesForEndpoint(req.url);\r\n        this.auth.getLogger().verbose(\"Url: \" + req.url + \" maps to scopes: \" + scopes);\r\n\r\n        // If there are no scopes set for this request, do nothing.\r\n        if (!scopes) {\r\n            return next.handle(req);\r\n        }\r\n\r\n        let token: string;\r\n\r\n        // Acquire a token for this request, and attach as proper auth header.\r\n        return from(\r\n            this.auth.acquireTokenSilent({ scopes })\r\n                .then((response: AuthResponse) => {\r\n                    token = response.tokenType === ServerHashParamKeys.ID_TOKEN ? response.idToken.rawIdToken : response.accessToken;\r\n                    const authHeader = `Bearer ${token}`;\r\n                    return req.clone({\r\n                        setHeaders: {\r\n                            Authorization: authHeader,\r\n                        }\r\n                    });\r\n                })\r\n        )\r\n        .pipe(\r\n            mergeMap(nextReq => next.handle(nextReq)),\r\n            tap(\r\n                event => {}, // tslint:disable-line\r\n                err => {\r\n                    if (err instanceof HttpErrorResponse && err.status === 401) {\r\n                        this.auth.clearCacheForScope(token);\r\n                        this.broadcastService.broadcast(\"msal:notAuthorized\", err.message);\r\n                    }\r\n                }\r\n            )\r\n        );\r\n    }\r\n}\r\n","export type MsalAngularConfiguration = {\r\n    consentScopes?: Array<string>;\r\n    popUp?: boolean;\r\n    extraQueryParameters?: {[key: string]: string};\r\n    unprotectedResources?: string[];\r\n    protectedResourceMap?: [string, string[]][] | Map<string, Array<string>>\r\n};\r\n\r\nexport const defaultMsalAngularConfiguration : MsalAngularConfiguration = {\r\n    consentScopes: [],\r\n    popUp: false,\r\n    extraQueryParameters: {},\r\n    unprotectedResources: [],\r\n    protectedResourceMap: []\r\n};\r\n","import { Injectable, ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MsalGuard } from \"./msal-guard.service\";\r\nimport { BroadcastService } from \"./broadcast.service\";\r\nimport { Configuration } from \"msal\";\r\nimport { MsalAngularConfiguration, defaultMsalAngularConfiguration } from \"./msal-angular.configuration\";\r\nimport { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from \"./constants\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n    declarations: [\r\n\r\n    ],\r\n  providers: [MsalGuard, BroadcastService],\r\n})\r\nexport class MsalModule {\r\n   static forRoot(\r\n       config: Configuration,\r\n       angularConfig: MsalAngularConfiguration = defaultMsalAngularConfiguration\r\n    ): ModuleWithProviders {\r\n    return {\r\n      ngModule: MsalModule,\r\n      providers: [\r\n        {\r\n            provide: MSAL_CONFIG,\r\n            useValue: config\r\n        },\r\n        {\r\n            provide: MSAL_CONFIG_ANGULAR,\r\n            useValue: angularConfig\r\n        },\r\n        MsalService\r\n      ]\r\n    };\r\n  }\r\n\r\n}\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {defaultMsalAngularConfiguration as Éµa} from './src/msal-angular.configuration';"],"names":[],"mappings":";;;;;;;;;IAOa,gBAAgB,GAA7B,MAAa,gBAAgB;IAIzB;QACC,IAAI,CAAC,YAAY,GAAG,IAAI,eAAe,CAAM,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;KACnD;IAED,SAAS,CAAC,IAAY,EAAE,OAAY;QAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAC,IAAI,EAAG,OAAO,EAAC,CAAC,CAAC;KAC5C;IAED,cAAc;QACV,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;IAED,WAAW;QACP,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAED,SAAS,CAAC,IAAY,EAAE,QAAyB;QAC7C,OAAO,IAAI,CAAC,SAAS;aAChB,IAAI,CACD,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,EACxC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAClC;aACA,SAAS,CAAC,QAAQ,CAAC,CAAC;KAC5B;EAEJ;AA9BY,gBAAgB;IAD5B,UAAU,EAAE;GACA,gBAAgB,CA8B5B;;MCrCY,SAAS;IAMlB,YAAY,KAAa,EAAG,SAAkB,EAAE,MAAe;QALvD,WAAM,GAAW,EAAE,CAAC;QACpB,eAAU,GAAW,EAAE,CAAC;QACxB,YAAO,GAAW,EAAE,CAAC;QAIzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,SAAS,EAAE;YACX,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC/B;QACD,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACzB;KACJ;IAED,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAED,IAAI,KAAK,CAAC,KAAa;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACvB;IAED,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAED,IAAI,SAAS,CAAC,KAAa;QACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KAC3B;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IAED,IAAI,MAAM,CAAC,KAAa;QACpB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB;CACJ;;MCrCY,WAAW,GAAG,IAAI,cAAc,CAAS,aAAa,CAAC,CAAC;AACrE,MAAa,mBAAmB,GAAG,IAAI,cAAc,CAAS,qBAAqB,CAAC;;ACepF,MAAM,eAAe,GAAG,CAAC,MAAqB;IAC1C,uCACO,MAAM,KACT,SAAS,kCACF,MAAM,CAAC,SAAS,KACnB,SAAS,EAAE,IAAI,OAErB;AACN,CAAC,CAAC;;AAGF,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,oBAAoB;IAEjD,YACiC,UAAyB,EACjB,iBAA2C,EACxE,MAAc,EACd,gBAAkC;QAE1C,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC;QALN,eAAU,GAAV,UAAU,CAAe;QACjB,sBAAiB,GAAjB,iBAAiB,CAA0B;QACxE,WAAM,GAAN,MAAM,CAAQ;QACd,qBAAgB,GAAhB,gBAAgB,CAAkB;QAI1C,MAAM,CAAC,gBAAgB,CAAC,uBAAuB,EAAE,CAAC,CAAc;YAC5D,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;SACjD,CAAC,CAAC;QAEH,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,CAAc;YACvD,IAAI,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,IAAI,CAAC,kBAAkB,EAAE,EAAE;gBAC3B,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;gBAC3D,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;aAClC;iBACI,IAAI,IAAI,CAAC,yBAAyB,EAAE,EAAE;gBACvC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;gBAClE,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;aACzC;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;oBAC/B,IAAI,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;wBAC7C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;4BAC5F,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;yBAC3E;qBACJ;iBACJ;aACJ;SACJ,CAAC,CAAC;KACN;IAEO,qBAAqB,CAAC,GAAW;QACrC,MAAM,6BAA6B,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;QAClH,MAAM,0BAA0B,GAAG,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,IAAI,EAAE,CAAC;QAErF,MAAM,oBAAoB,GAAG,6BAA6B,IAAI,6BAA6B,CAAC,MAAM,GAAG,6BAA6B,GAAG,0BAA0B,CAAC;QAEhK,OAAO,oBAAoB,CAAC,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC5E;IAEO,OAAO,CAAC,GAAW;QACvB,QAAQ,OAAO,GAAG,KAAK,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,EAAE;KACnE;IAEM,UAAU,CAAC,OAAkC;QAChD,OAAO,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,CAAC,YAA0B;YAC7B,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;YACnE,OAAO,YAAY,CAAC;SACvB,CAAC;aACD,KAAK,CAAC,CAAC,KAAgB;YACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;YAC5D,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,uBAAuB,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;YACrE,MAAM,KAAK,CAAC;SACf,CAAC,CAAC;KACV;IAEM,SAAS,CAAC,OAAiC;QAC9C,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC;aAC1B,IAAI,CAAC,CAAC,YAA0B;YAC7B,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;YACjE,OAAO,YAAY,CAAC;SACvB,CAAC;aACD,KAAK,CAAC,CAAC,KAAgB;YACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;YAC1D,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,uBAAuB,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC;YACrE,MAAM,KAAK,CAAC;SACf,CAAC,CAAC;KACV;IAEM,kBAAkB,CAAC,OAAiC;QACvD,OAAO,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC;aACnC,IAAI,CAAC,CAAC,YAA0B;YAC7B,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;YAC1E,OAAO,YAAY,CAAC;SACvB,CAAC;aACD,KAAK,CAAC,CAAC,KAAgB;YACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACnE,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,yCAAyC,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC;YACjG,MAAM,KAAK,CAAC;SACf,CAAC,CAAC;KAEV;IAEM,iBAAiB,CAAC,OAAiC;QACtD,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC;aAClC,IAAI,CAAC,CAAC,YAA0B;YAC7B,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;YAC1E,OAAO,YAAY,CAAC;SACvB,CAAC;aACD,KAAK,CAAC,CAAC,KAAgB;YACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACnE,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,0CAA0C,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAI,KAAK,CAAC,CAAC;YACnG,MAAM,KAAK,CAAC;SACf,CAAC,CAAC;KACV;IAID,sBAAsB,CAAC,mBAAiE,EAAE,qBAA6C;QACnI,KAAK,CAAC,sBAAsB,CAAC,CAAC,SAAoB,EAAE,YAA0B;YAC1E,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;oBACpB,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;iBAEnE;qBAAM;oBACH,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;iBAC1E;gBAED,IAAI,qBAAqB,EAAE;oBACvB,qBAAqB,CAAC,SAAS,EAAE,YAAY,CAAC,YAAY,CAAC,CAAC;iBAC/D;qBAAM;oBACF,mBAA4C,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;iBAC1E;aAEJ;iBAAM,IAAI,YAAY,EAAE;gBACrB,IAAI,YAAY,CAAC,SAAS,KAAK,UAAU,EAAE;oBACvC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;iBACtE;qBAAM;oBACH,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;iBAC7E;gBAED,IAAI,qBAAqB,EAAE;oBACtB,mBAA6C,CAAC,YAAY,CAAC,CAAC;iBAChE;qBAAM;oBACF,mBAA4C,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;iBACrE;aAEJ;SACJ,CAAC,CAAC;KACN;IAEM,kBAAkB,CAAC,WAAmB;QACzC,OAAO,KAAK,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;KAChD;IAEM,oBAAoB,CAAC,QAAgB;QACxC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,EAAE;YAC7E,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,qGAAqG,CAAC,CAAC;SAChI;;QAGD,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAI,aAAa,EAAE;YACf,OAAO,IAAI,CAAC;SACf;QAED,MAAM,6BAA6B,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,oBAAoB,CAAC;QAClH,IAAI,6BAA6B,EAAE;YAC/B,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,qGAAqG,CAAC,CAAC;SAChI;QAED,MAAM,oBAAoB,GAAG,6BAA6B,IAAI,6BAA6B,CAAC,IAAI,GAAG,6BAA6B,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;;QAGxL,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACvG,IAAI,cAAc,EAAE;YAChB,OAAO,oBAAoB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SACnD;;;;;;QAOD,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACvE,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,EAAE;gBACvF,OAAO,IAAI,KAAK,CAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC3D;SACJ;aAAM;;;;;YAKH,OAAO,IAAI,KAAK,CAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3D;;QAGD,OAAO,IAAI,CAAC;KACf;CACJ,CAAA;;4CA1LQ,MAAM,SAAC,WAAW;4CAClB,MAAM,SAAC,mBAAmB;YACX,MAAM;YACI,gBAAgB;;AANrC,WAAW;IADvB,UAAU,EAAE;IAIJ,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;IACnB,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;GAJvB,WAAW,CA6LvB;;IC5MY,SAAS,GAAtB,MAAa,SAAS;IAElB,YACiC,UAAyB,EACjB,iBAA2C,EACxE,WAAwB,EACxB,MAAc,EACd,cAA8B,EAC9B,QAAkB,EAClB,gBAAkC,EAClC,gBAAkC;QAPb,eAAU,GAAV,UAAU,CAAe;QACjB,sBAAiB,GAAjB,iBAAiB,CAA0B;QACxE,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,aAAQ,GAAR,QAAQ,CAAU;QAClB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;KAC1C;;;;;;IAOJ,iBAAiB,CAAC,IAAY;;QAE1B,MAAM,YAAY,GAAG,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;;QAG7G,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;;QAGvD,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACzB,OAAO,GAAG,OAAO,IAAI,OAAO,EAAE,CAAC;SAClC;;;QAID,OAAO,GAAG,OAAO,GAAG,IAAI,EAAE,CAAC;KAC9B;;;;;IAMK,kBAAkB,CAAC,GAAW;;YAChC,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE;gBAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;oBAC/B,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa;oBAC5C,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB;iBACpE,CAAC;qBACG,IAAI,CAAC,MAAM,IAAI,CAAC;qBAChB,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;aAC3B;YAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;YAEtD,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;gBAC3B,iBAAiB;gBACjB,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa;gBAC5C,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC,oBAAoB;aACpE,CAAC,CAAC;SACN;KAAA;IAED,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACjE,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,+CAA+C,CAAC,CAAC;;;QAItF,IAAI,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,UAAU,EAAE,EAAE;YAC5E,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,2HAA2H,CAAC,CAAC;YAClK,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE;YAChC,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC7C;QAED,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC;YACvC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;SAC1C,CAAC;aACG,IAAI,CAAC,MAAM,IAAI,CAAC;aAChB,KAAK,CAAC,CAAC,KAAgB;YACpB,IAAI,4BAA4B,CAAC,0BAA0B,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBAC1E,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;gBAC1G,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC7C;YAED,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,wCAAwC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;YACjG,MAAM,KAAK,CAAC;SACf,CAAC,CAAC;KACV;CAEJ,CAAA;;4CArFQ,MAAM,SAAC,WAAW;4CAClB,MAAM,SAAC,mBAAmB;YACN,WAAW;YAChB,MAAM;YACE,cAAc;YACpB,QAAQ;YACA,gBAAgB;YAChB,gBAAgB;;AAVrC,SAAS;IADrB,UAAU,EAAE;IAIJ,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;IACnB,WAAA,MAAM,CAAC,mBAAmB,CAAC,CAAA;GAJvB,SAAS,CAwFrB;;ICrFY,eAAe,GAA5B,MAAa,eAAe;IACxB,YAAoB,IAAiB,EAAY,gBAAkC;QAA/D,SAAI,GAAJ,IAAI,CAAa;QAAY,qBAAgB,GAAhB,gBAAgB,CAAkB;KAAI;IAEvF,SAAS,CAAC,GAAqB,EAAE,IAAiB;QAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,GAAG,mBAAmB,GAAG,MAAM,CAAC,CAAC;;QAGhF,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B;QAED,IAAI,KAAa,CAAC;;QAGlB,OAAO,IAAI,CACP,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,MAAM,EAAE,CAAC;aACnC,IAAI,CAAC,CAAC,QAAsB;YACzB,KAAK,GAAG,QAAQ,CAAC,SAAS,KAAK,mBAAmB,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,GAAG,QAAQ,CAAC,WAAW,CAAC;YACjH,MAAM,UAAU,GAAG,UAAU,KAAK,EAAE,CAAC;YACrC,OAAO,GAAG,CAAC,KAAK,CAAC;gBACb,UAAU,EAAE;oBACR,aAAa,EAAE,UAAU;iBAC5B;aACJ,CAAC,CAAC;SACN,CAAC,CACT;aACA,IAAI,CACD,QAAQ,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,EACzC,GAAG,CACC,KAAK,OAAM;;QACX,GAAG;YACC,IAAI,GAAG,YAAY,iBAAiB,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACxD,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,oBAAoB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;aACtE;SACJ,CACJ,CACJ,CAAC;KACL;CACJ,CAAA;;YAvC6B,WAAW;YAA8B,gBAAgB;;AAD1E,eAAe;IAD3B,UAAU,EAAE;GACA,eAAe,CAwC3B;;MCjDY,+BAA+B,GAA8B;IACtE,aAAa,EAAE,EAAE;IACjB,KAAK,EAAE,KAAK;IACZ,oBAAoB,EAAE,EAAE;IACxB,oBAAoB,EAAE,EAAE;IACxB,oBAAoB,EAAE,EAAE;CAC3B;;;ICEY,UAAU,kBAAvB,MAAa,UAAU;IACpB,OAAO,OAAO,CACV,MAAqB,EACrB,gBAA0C,+BAA+B;QAE5E,OAAO;YACL,QAAQ,EAAE,YAAU;YACpB,SAAS,EAAE;gBACT;oBACI,OAAO,EAAE,WAAW;oBACpB,QAAQ,EAAE,MAAM;iBACnB;gBACD;oBACI,OAAO,EAAE,mBAAmB;oBAC5B,QAAQ,EAAE,aAAa;iBAC1B;gBACD,WAAW;aACZ;SACF,CAAC;KACH;CAEF,CAAA;AArBY,UAAU;IAPtB,QAAQ,CAAC;QACR,OAAO,EAAE,CAAC,YAAY,CAAC;QACrB,YAAY,EAAE,EAEb;QACH,SAAS,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;KACzC,CAAC;GACW,UAAU,CAqBtB;;ACrCD;;GAEG;;;;"}