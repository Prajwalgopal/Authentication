import { __awaiter, __decorate, __param } from "tslib";
import { Inject, Injectable } from "@angular/core";
import { ActivatedRoute, ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, } from "@angular/router";
import { MsalService } from "./msal.service";
import { Location, PlatformLocation } from "@angular/common";
import { BroadcastService } from "./broadcast.service";
import { InteractionRequiredAuthError, UrlUtils, WindowUtils } from "msal";
import { MSAL_CONFIG, MSAL_CONFIG_ANGULAR } from "./constants";
let MsalGuard = class MsalGuard {
    constructor(msalConfig, msalAngularConfig, authService, router, activatedRoute, location, platformLocation, broadcastService) {
        this.msalConfig = msalConfig;
        this.msalAngularConfig = msalAngularConfig;
        this.authService = authService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.location = location;
        this.platformLocation = platformLocation;
        this.broadcastService = broadcastService;
    }
    /**
     * Builds the absolute url for the destination page
     * @param path Relative path of requested page
     * @returns Full destination url
     */
    getDestinationUrl(path) {
        // Absolute base url for the application (default to origin if base element not present)
        const baseElements = document.getElementsByTagName("base");
        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);
        // Path of page (including hash, if using hash routing)
        const pathUrl = this.location.prepareExternalUrl(path);
        // Hash location strategy
        if (pathUrl.startsWith("#")) {
            return `${baseUrl}/${pathUrl}`;
        }
        // If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).
        // Since baseUrl also includes /base, can just concatentate baseUrl + path
        return `${baseUrl}${path}`;
    }
    /**
     * Interactively prompt the user to login
     * @param url Path of the requested page
     */
    loginInteractively(url) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.msalAngularConfig.popUp) {
                return this.authService.loginPopup({
                    scopes: this.msalAngularConfig.consentScopes,
                    extraQueryParameters: this.msalAngularConfig.extraQueryParameters
                })
                    .then(() => true)
                    .catch(() => false);
            }
            const redirectStartPage = this.getDestinationUrl(url);
            this.authService.loginRedirect({
                redirectStartPage,
                scopes: this.msalAngularConfig.consentScopes,
                extraQueryParameters: this.msalAngularConfig.extraQueryParameters
            });
        });
    }
    canActivate(route, state) {
        this.authService.getLogger().verbose("location change event from old url to new url");
        // If a page with MSAL Guard is set as the redirect for acquireTokenSilent,
        // short-circuit to prevent redirecting or popups.
        if (UrlUtils.urlContainsHash(window.location.hash) && WindowUtils.isInIframe()) {
            this.authService.getLogger().warning("redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.");
            return false;
        }
        if (!this.authService.getAccount()) {
            return this.loginInteractively(state.url);
        }
        return this.authService.acquireTokenSilent({
            scopes: [this.msalConfig.auth.clientId]
        })
            .then(() => true)
            .catch((error) => {
            if (InteractionRequiredAuthError.isInteractionRequiredError(error.errorCode)) {
                this.authService.getLogger().info(`Interaction required error in MSAL Guard, prompting for interaction.`);
                return this.loginInteractively(state.url);
            }
            this.authService.getLogger().error(`Non-interaction error in MSAL Guard: ${error.errorMessage}`);
            throw error;
        });
    }
};
MsalGuard.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MSAL_CONFIG_ANGULAR,] }] },
    { type: MsalService },
    { type: Router },
    { type: ActivatedRoute },
    { type: Location },
    { type: PlatformLocation },
    { type: BroadcastService }
];
MsalGuard = __decorate([
    Injectable(),
    __param(0, Inject(MSAL_CONFIG)),
    __param(1, Inject(MSAL_CONFIG_ANGULAR))
], MsalGuard);
export { MsalGuard };
//# sourceMappingURL=data:application/json;base64,