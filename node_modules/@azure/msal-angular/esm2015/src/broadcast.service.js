import { __decorate } from "tslib";
import { Injectable } from "@angular/core";
import { BehaviorSubject } from "rxjs";
import { filter, map } from "rxjs/operators";
let BroadcastService = class BroadcastService {
    constructor() {
        this._msalSubject = new BehaviorSubject(1);
        this.msalItem$ = this._msalSubject.asObservable();
    }
    broadcast(type, payload) {
        this._msalSubject.next({ type, payload });
    }
    getMSALSubject() {
        return this._msalSubject;
    }
    getMSALItem() {
        return this.msalItem$;
    }
    subscribe(type, callback) {
        return this.msalItem$
            .pipe(filter(message => message.type === type), map(message => message.payload))
            .subscribe(callback);
    }
};
BroadcastService = __decorate([
    Injectable()
], BroadcastService);
export { BroadcastService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvYWRjYXN0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYXp1cmUvbXNhbC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2Jyb2FkY2FzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQTRCLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLN0MsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFJekI7UUFDQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksZUFBZSxDQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVksRUFBRSxPQUFZO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFHLE9BQU8sRUFBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFZLEVBQUUsUUFBeUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsU0FBUzthQUNoQixJQUFJLENBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFDeEMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUNsQzthQUNBLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBRUosQ0FBQTtBQTlCWSxnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0dBQ0EsZ0JBQWdCLENBOEI1QjtTQTlCWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5cclxuZXhwb3J0IHR5cGUgTWVzc2FnZUNhbGxiYWNrID0gKHBheWxvYWQ6IGFueSkgPT4gdm9pZDtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJyb2FkY2FzdFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBfbXNhbFN1YmplY3QgOiBCZWhhdmlvclN1YmplY3Q8YW55PiA7XHJcbiAgICBwcml2YXRlIG1zYWxJdGVtJDogIE9ic2VydmFibGU8YW55PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICB0aGlzLl9tc2FsU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PigxKTtcclxuICAgICB0aGlzLm1zYWxJdGVtJCAgPSB0aGlzLl9tc2FsU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBicm9hZGNhc3QodHlwZTogc3RyaW5nLCBwYXlsb2FkOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9tc2FsU3ViamVjdC5uZXh0KHt0eXBlICwgcGF5bG9hZH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1TQUxTdWJqZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tc2FsU3ViamVjdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNU0FMSXRlbSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tc2FsSXRlbSQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3Vic2NyaWJlKHR5cGU6IHN0cmluZywgY2FsbGJhY2s6IE1lc3NhZ2VDYWxsYmFjayk6IFN1YnNjcmlwdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXNhbEl0ZW0kXHJcbiAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyKG1lc3NhZ2UgPT4gbWVzc2FnZS50eXBlID09PSB0eXBlKSxcclxuICAgICAgICAgICAgICAgIG1hcChtZXNzYWdlID0+IG1lc3NhZ2UucGF5bG9hZClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19