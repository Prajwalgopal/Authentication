import { __decorate } from "tslib";
import { Injectable } from "@angular/core";
import { HttpErrorResponse } from "@angular/common/http";
import { from } from "rxjs";
import { mergeMap, tap } from "rxjs/operators";
import { MsalService } from "./msal.service";
import { BroadcastService } from "./broadcast.service";
import { ServerHashParamKeys } from "msal";
var MsalInterceptor = /** @class */ (function () {
    function MsalInterceptor(auth, broadcastService) {
        this.auth = auth;
        this.broadcastService = broadcastService;
    }
    MsalInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        var scopes = this.auth.getScopesForEndpoint(req.url);
        this.auth.getLogger().verbose("Url: " + req.url + " maps to scopes: " + scopes);
        // If there are no scopes set for this request, do nothing.
        if (!scopes) {
            return next.handle(req);
        }
        var token;
        // Acquire a token for this request, and attach as proper auth header.
        return from(this.auth.acquireTokenSilent({ scopes: scopes })
            .then(function (response) {
            token = response.tokenType === ServerHashParamKeys.ID_TOKEN ? response.idToken.rawIdToken : response.accessToken;
            var authHeader = "Bearer " + token;
            return req.clone({
                setHeaders: {
                    Authorization: authHeader,
                }
            });
        }))
            .pipe(mergeMap(function (nextReq) { return next.handle(nextReq); }), tap(function (event) { }, // tslint:disable-line
        function (// tslint:disable-line
        err) {
            if (err instanceof HttpErrorResponse && err.status === 401) {
                _this.auth.clearCacheForScope(token);
                _this.broadcastService.broadcast("msal:notAuthorized", err.message);
            }
        }));
    };
    MsalInterceptor.ctorParameters = function () { return [
        { type: MsalService },
        { type: BroadcastService }
    ]; };
    MsalInterceptor = __decorate([
        Injectable()
    ], MsalInterceptor);
    return MsalInterceptor;
}());
export { MsalInterceptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhenVyZS9tc2FsLWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvbXNhbC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBS0gsaUJBQWlCLEVBQ3BCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFjLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN4QyxPQUFPLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQWdCLG1CQUFtQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3pEO0lBQ0kseUJBQW9CLElBQWlCLEVBQVksZ0JBQWtDO1FBQS9ELFNBQUksR0FBSixJQUFJLENBQWE7UUFBWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBQUcsQ0FBQztJQUV2RixtQ0FBUyxHQUFULFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtRQUFsRCxpQkFvQ0M7UUFuQ0csSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFaEYsMkRBQTJEO1FBQzNELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDM0I7UUFFRCxJQUFJLEtBQWEsQ0FBQztRQUVsQixzRUFBc0U7UUFDdEUsT0FBTyxJQUFJLENBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUM7YUFDbkMsSUFBSSxDQUFDLFVBQUMsUUFBc0I7WUFDekIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxTQUFTLEtBQUssbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztZQUNqSCxJQUFNLFVBQVUsR0FBRyxZQUFVLEtBQU8sQ0FBQztZQUNyQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ2IsVUFBVSxFQUFFO29CQUNSLGFBQWEsRUFBRSxVQUFVO2lCQUM1QjthQUNKLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUNUO2FBQ0EsSUFBSSxDQUNELFFBQVEsQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQXBCLENBQW9CLENBQUMsRUFDekMsR0FBRyxDQUNDLFVBQUEsS0FBSyxJQUFLLENBQUMsRUFBRSxzQkFBc0I7UUFDbkMsVUFEYSxzQkFBc0I7UUFDbkMsR0FBRztZQUNDLElBQUksR0FBRyxZQUFZLGlCQUFpQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO2dCQUN4RCxLQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNwQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN0RTtRQUNMLENBQUMsQ0FDSixDQUNKLENBQUM7SUFDTixDQUFDOztnQkF0Q3lCLFdBQVc7Z0JBQThCLGdCQUFnQjs7SUFEMUUsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlLENBd0MzQjtJQUFELHNCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0F4Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1xyXG4gICAgSHR0cFJlcXVlc3QsXHJcbiAgICBIdHRwSGFuZGxlcixcclxuICAgIEh0dHBFdmVudCxcclxuICAgIEh0dHBJbnRlcmNlcHRvcixcclxuICAgIEh0dHBFcnJvclJlc3BvbnNlXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgbWVyZ2VNYXAsIHRhcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xyXG5cclxuaW1wb3J0IHtNc2FsU2VydmljZX0gZnJvbSBcIi4vbXNhbC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEJyb2FkY2FzdFNlcnZpY2UgfSBmcm9tIFwiLi9icm9hZGNhc3Quc2VydmljZVwiO1xyXG5pbXBvcnQgeyBBdXRoUmVzcG9uc2UsIFNlcnZlckhhc2hQYXJhbUtleXMgfSBmcm9tIFwibXNhbFwiO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTXNhbEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aDogTXNhbFNlcnZpY2UgLCAgcHJpdmF0ZSBicm9hZGNhc3RTZXJ2aWNlOiBCcm9hZGNhc3RTZXJ2aWNlKSB7fVxyXG5cclxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xyXG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IHRoaXMuYXV0aC5nZXRTY29wZXNGb3JFbmRwb2ludChyZXEudXJsKTtcclxuICAgICAgICB0aGlzLmF1dGguZ2V0TG9nZ2VyKCkudmVyYm9zZShcIlVybDogXCIgKyByZXEudXJsICsgXCIgbWFwcyB0byBzY29wZXM6IFwiICsgc2NvcGVzKTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNjb3BlcyBzZXQgZm9yIHRoaXMgcmVxdWVzdCwgZG8gbm90aGluZy5cclxuICAgICAgICBpZiAoIXNjb3Blcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0b2tlbjogc3RyaW5nO1xyXG5cclxuICAgICAgICAvLyBBY3F1aXJlIGEgdG9rZW4gZm9yIHRoaXMgcmVxdWVzdCwgYW5kIGF0dGFjaCBhcyBwcm9wZXIgYXV0aCBoZWFkZXIuXHJcbiAgICAgICAgcmV0dXJuIGZyb20oXHJcbiAgICAgICAgICAgIHRoaXMuYXV0aC5hY3F1aXJlVG9rZW5TaWxlbnQoeyBzY29wZXMgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZTogQXV0aFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSByZXNwb25zZS50b2tlblR5cGUgPT09IFNlcnZlckhhc2hQYXJhbUtleXMuSURfVE9LRU4gPyByZXNwb25zZS5pZFRva2VuLnJhd0lkVG9rZW4gOiByZXNwb25zZS5hY2Nlc3NUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdXRoSGVhZGVyID0gYEJlYXJlciAke3Rva2VufWA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcS5jbG9uZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGF1dGhIZWFkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICBtZXJnZU1hcChuZXh0UmVxID0+IG5leHQuaGFuZGxlKG5leHRSZXEpKSxcclxuICAgICAgICAgICAgdGFwKFxyXG4gICAgICAgICAgICAgICAgZXZlbnQgPT4ge30sIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICAgICAgICAgICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlICYmIGVyci5zdGF0dXMgPT09IDQwMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGguY2xlYXJDYWNoZUZvclNjb3BlKHRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3RTZXJ2aWNlLmJyb2FkY2FzdChcIm1zYWw6bm90QXV0aG9yaXplZFwiLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=